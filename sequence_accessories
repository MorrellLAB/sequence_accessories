#!/bin/bash

set -eo pipefail

#   Usage message
function Usage() {
    echo -e "\
Usage:  $(basename $0) <accessory> \n\
Where:  <accessory> is one of: \n\
        SummarizeStats \n\
        DumpFastq \n\
        SRADownloader \n\
" >&2
    exit 1
}

#   Export the function
export -f Usage

#   A function to say invalid argument
function invalid() {
    local arg="$1"
    echo -e "\nParameter error: ${arg%=*} not recognized\n" >&2
}

#   A function to check a sample list
function checkSampleList() {
    local sampleList=$1
    [[ -f "${sampleList}" ]] || (echo "Failed to find ${sampleList}, exiting..." >&2; exit 1)
    for sample in $(<"${sampleList}")
    do
        [[ -f "${sample}" ]] || (echo "Failed to find sample ${sample}, exiting..." >&2; exit 1)
    done
}

#   Export the function
export -f checkSampleList

#   A function to check dependencies
function checkDependency() {
    local dependency=$1
    $(command -v ${dependency} > /dev/null 2> /dev/null) || ( echo "Failed to find ${dependency}, exiting..." >&2; exit 1)
}

#   Some checks
SEQ_ACC=$(pwd -P)
ACC_DIR="${SEQ_ACC}/Accessories"
[[ -d "${ACC_DIR}" ]] || (echo "Cannot find the Accessories! Please leave this script in the 'sequence_accessories' directory" >&2; exit 1)

#   Figure out which accessory we're working with and remove it from the argument list
[[ "$#" -lt 1 ]] && Usage
ACCESSORY="$1"
shift

#   Run sequence_accessories
case "${ACCESSORY}" in
    SummarizeStats)
        echo "$(basename $0): Generating summary statistics..." >&2
        # echo "Not yet implemented..." >&2; exit 1
        source "${ACC_DIR}/SummarizeStats.sh"
        #   Check our dependencies for SummarizeStats
        for prog in "${idx_deps[@]}"; do checkDependency "${prog}"; done
        #   Check to make sure we have arguments for SummarizeStats
        [[ "$#" -lt 1 ]] && idxUsage # If not, exit with usage message
        #   Parse arguments
        for arg in "$@" # For every argument in our argument list
        do
            case "${arg}" in # Use a case statment to figure out what argument we have
            #   Use the #*= do delete everything up to and including the '=' from the argument (arg value)
            #   Use the %=* to delete everything beyond the '=' from the argument (arg param)
                --sample-list=*) # Sample list
                    SAMPLE_LIST="${arg#*=}"
                    shift
                    ;;
                --project=*)
                    PROJECT="${arg#*=}"
                    shift
                    ;;
                *)
                    invalid "${arg}"; idxUsage
                    ;;
            esac
        done
        #   Set a default project parameter
        [[ -z "${PROJECT}" ]] && PROJECT="${PROJECT_DEFAULT}"
        #   Validate our sample list
        checkSampleList "${SAMPLE_LIST}"
        #   Run SummarizeStats
        SummarizeStats "${SAMPLE_LIST}" "${PROJECT}"
        ;;
    DumpFastq)
        echo "$(basename $0): Dumping SRA files to FastQ files..." >&2
        source "${ACC_DIR}/DumpFastq.sh"
        #   Check our dependencies for DumpFastq
        for prog in "${dump_deps[@]}"; do checkDependency "${prog}"; done
        #   Check to make sure we have arguments for DumpFastq
        [[ "$#" -lt 1 ]] && dumpUsage # If not, exit with usage message
        #   Parse arguments
        for arg in "$@"
        do
            case "${arg}" in
                --sample-list=*)
                    SAMPLE_LIST="${arg#*=}"
                    shift
                    ;;
                --outdirectory=*)
                    OUTDIRECTORY="${arg#*=}"
                    shift
                    ;;
                --paired)
                    PAIRED=true
                    ;;
                *)
                    invalid "${arg}"; dumpUsage
                    ;;
            esac
        done
        #   Set defaults
        [[ -z "${PAIRED}" ]] && PAIRED=false # Assume not paired if not specified on the command line
        [[ -z "${OUTDIRECTORY}" ]] && OUTDIRECTORY="${OUTPUT_DEFAULT}"
        #   Validate our sample list
        checkSampleList "${SAMPLE_LIST}"
        #   Run DumpFastq
        DumpFastq "${SAMPLE_LIST}" "${OUTDIRECTORY}" "${PAIRED}"
        ;;
    SRADownloader)
        echo "$(basename $0): Downloading from the SRA" >&2
        source "${ACC_DIR}/SRADownloader.sh"
        #   Check our dependencies for SRADownloader
        for prog in "${sra_deps}"; do checkDependency "${prog}"; done
        #   Check to make sure we have arguments for SRADownloader
        [[ "$#" -lt 1 ]] && SRAUsage
        #   Parse arguments
        for arg in "$@"
        do
            case "${arg}" in
                --sample-list=*)
                    SAMPLE_LIST="${arg#*=}"
                    shift
                    ;;
                --sample-type=*)
                    TYPE="${arg#*=}"
                    shift
                    ;;
                --outdirectory=*)
                    OUTDIRECTORY="${arg#*=}"
                    shift
                    ;;
                --validate)
                    VALIDATE=true
                    shift
                    ;;
                *)
                    invalid "${arg}"; SRAUsage
                    ;;
            esac
        done
        #   Set some defaults
        [[ "${VALIDATE}" ]] && checkDependency vdb-validate || VALIDATE=false
        [[ -z "${OUTDIRECTORY}" ]] && OUTDIRECTORY="${OUTPUT_DEFAULT}"
        [[ -z "${TYPE}" ]] && (echo "Missing --sample-type, please choose from: ${SRATYPES[@]}"; exit 1)
        #   Check our inputs
        # $(grep "${TYPE}" <(echo "${sra_types[@]}" | tr ' ' '\n') > /dev/null 2> /dev/null) || (echo -e "\nInvalid type: ${TYPE}\nChoose from: ${sra_types[@]}\n" >&2; exit 1)
        # echo ${#SRATYPES[@]}; exit 5
        [[ "${SRATYPES[@]}" =~ "${TYPE}" ]] || (echo -e "\nInvalid type: ${TYPE}\nChoose from: ${SRATYPES[@]}\n" >&2; exit 1)
        # checkSampleList "${SAMPLE_LIST}"
        [[ -f "${SAMPLE_LIST}" ]] || (echo "Failed to find ${SAMPLE_LIST}, exiting..."; exit 1)
        #   Run SRADownloader
        SRADownloader "${SAMPLE_LIST}" "${TYPE}" "${OUTDIRECTORY}" "${VALIDATE}"
        ;;
    * )
        Usage
        ;;
esac
